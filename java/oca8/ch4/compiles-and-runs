public void task() {}
---
yes
***
void public task() {}
---
no, access modifier goes before return type
***
void task() { }
---
yes
***
default void task() {}
---
no, default is not a valid access modifier
***
void task() {}
---
yes
***
public final void task() { }
---
yes
***
final public void task() { }
---
yes, optional specifiers can appear before any access modifier
***
static public final void task() { }
---
yes, optional specifiers can appear in a given method declaration before and after any access modifier
***
public byte task() { return 1; }
---
yes
***
public byte task() {
  byte b = 1;
  return b;
}
---
yes
***
public byte task() {
  byte b = 1 + 1;
  return b;
}
---
yes
***
public byte task() {
  byte b = 1;
  return b + b;
}
---
no, type of expression `b + b` is `int`.
***
public static byte task() { return 1 + 1; }
---
yes
***
public static byte task() { return (short) 1; }
---
yes
***
public static byte task() { return (short) (1 + 1); }
---
yes
***
public static byte task() { return (int) (1 + 1); }
---
yes
***
public static byte task() { return (byte) 1 + (byte) 1; }
---
yes
***
public static Object task() { return "hola"; }
---
yes
***
public static String task() { return (String) (Object) "hola"; }
---
yes
***
public static float task() { return 1.0; }
---
no, type of `1.0` is double.
***
public static float task() { return (float) 1.0; }
---
yes
***
public static float task() { return 1.0f; }
---
yes
***
public void task(int... nn) { }
---
yes
***
public void task(int... nn) { }
public void callTask() { task(null); }
---
yes
***
public void task(int... nn) { }
public void callTask() { task(null) }
---
no, missing semicolon in line 2
***
void task(int m, int... n) { System.out.println(n.length()); }
void callTask() { task(1); }
---
no, there is no method length for array n
***
void task(int m, int... n) { System.out.println(n.length); }
void callTask() { task(1); }
---
yes
***
file Model.java

public class Model {
  public static void m() { System.out.println("m!"); }
}

file Tester.java

public class Tester {
  public static void test() {
    Model m = null;
    m.m();
  }
}
---
yes
***
 1 : public class Main {
 2 :   public static void m(int n) {
 3 :     out.println("this is int n: " + n);
 4 :   }
 5 :   static void m(int n) {
 6 :     out.println("this is int n: " + n);
 7 :   }
 8 :   public static void main(String... args) {
 9 :     m(1);
10 :   }
11 : }
---
no, line 5 gives "method m(int) is already defined in class Main"
***
 1: import static java.lang.System.out;
 2: import static java.util.Arrays.toString;
 3:
 4: public class Main {
 5:   private static void m(String... a) {
 6:     out.println(toString(a));
 7:   }
 8:   public static void main(String[] args) {
 9:     m("one", "two");
10:   }
11: }
---
no because line 6 calls method toString given by class Object, not by Arrays.